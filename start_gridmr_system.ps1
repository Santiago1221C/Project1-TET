# Script de inicio completo para el sistema GridMR
# Este script inicia el master, registra workers y ejecuta pruebas

param(
    [string]$MasterHost = "localhost",
    [int]$MasterPort = 8080,
    [string]$WorkerCount = "2",
    [switch]$SkipTests = $false,
    [switch]$Verbose = $false
)

Write-Host "üöÄ Iniciando sistema GridMR completo" -ForegroundColor Green
Write-Host "=" * 50

# Configurar variables de entorno
$env:GRIDMR_MASTER_HOST = $MasterHost
$env:GRIDMR_MASTER_PORT = $MasterPort.ToString()

Write-Host "üìã Configuraci√≥n:" -ForegroundColor Yellow
Write-Host "   Master: $MasterHost:$MasterPort"
Write-Host "   Workers: $WorkerCount"
Write-Host "   Tests: $(if ($SkipTests) { 'Deshabilitados' } else { 'Habilitados' })"
Write-Host ""

# Funci√≥n para verificar si un puerto est√° en uso
function Test-Port {
    param([int]$Port)
    try {
        $connection = New-Object System.Net.Sockets.TcpClient
        $connection.Connect("localhost", $Port)
        $connection.Close()
        return $true
    } catch {
        return $false
    }
}

# Funci√≥n para esperar a que un servicio est√© disponible
function Wait-ForService {
    param(
        [string]$Url,
        [int]$TimeoutSeconds = 30,
        [string]$ServiceName = "Servicio"
    )
    
    Write-Host "‚è≥ Esperando que $ServiceName est√© disponible..." -ForegroundColor Yellow
    $startTime = Get-Date
    $timeout = $startTime.AddSeconds($TimeoutSeconds)
    
    while ((Get-Date) -lt $timeout) {
        try {
            $response = Invoke-WebRequest -Uri $Url -Method GET -TimeoutSec 5 -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ $ServiceName est√° disponible" -ForegroundColor Green
                return $true
            }
        } catch {
            # Servicio no disponible a√∫n
        }
        
        Start-Sleep -Seconds 2
    }
    
    Write-Host "‚ùå $ServiceName no est√° disponible despu√©s de $TimeoutSeconds segundos" -ForegroundColor Red
    return $false
}

# 1. Verificar que el master no est√© ya ejecut√°ndose
Write-Host "üîç Verificando estado del master..." -ForegroundColor Yellow
if (Test-Port -Port $MasterPort) {
    Write-Host "‚ö†Ô∏è  El puerto $MasterPort ya est√° en uso. ¬øEl master ya est√° ejecut√°ndose?" -ForegroundColor Yellow
    $response = Read-Host "¬øContinuar de todos modos? (y/N)"
    if ($response -ne "y" -and $response -ne "Y") {
        Write-Host "‚ùå Operaci√≥n cancelada" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úÖ Puerto $MasterPort est√° disponible" -ForegroundColor Green
}

# 2. Iniciar el master
Write-Host ""
Write-Host "üéØ Iniciando Master GridMR..." -ForegroundColor Yellow

# Cambiar al directorio del master
Push-Location "gridmr-master"

try {
    # Compilar el master si es necesario
    Write-Host "üî® Compilando master..." -ForegroundColor Yellow
    $mvnResult = mvn clean compile -q
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Error compilando master" -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ Master compilado exitosamente" -ForegroundColor Green
    
    # Iniciar el master en segundo plano
    Write-Host "üöÄ Iniciando master en segundo plano..." -ForegroundColor Yellow
    $masterProcess = Start-Process -FilePath "mvn" -ArgumentList "spring-boot:run" -PassThru -WindowStyle Hidden
    Write-Host "   PID del master: $($masterProcess.Id)" -ForegroundColor Gray
    
    # Esperar a que el master est√© disponible
    if (-not (Wait-ForService -Url "http://$MasterHost`:$MasterPort/api/health" -ServiceName "Master GridMR")) {
        Write-Host "‚ùå No se pudo iniciar el master" -ForegroundColor Red
        Stop-Process -Id $masterProcess.Id -Force -ErrorAction SilentlyContinue
        exit 1
    }
    
} finally {
    Pop-Location
}

# 3. Registrar workers de prueba
Write-Host ""
Write-Host "üë• Registrando workers de prueba..." -ForegroundColor Yellow

$workerCount = [int]$WorkerCount
for ($i = 1; $i -le $workerCount; $i++) {
    $workerId = "worker-$i"
    $workerPort = 9090 + $i - 1
    
    Write-Host "üìù Registrando $workerId en puerto $workerPort..." -ForegroundColor Gray
    
    $workerData = @{
        worker_id = $workerId
        host = "localhost"
        port = $workerPort
        cpu_cores = 4
        memory_mb = 8192
        disk_space_gb = 100
        compute_power = 100
        max_concurrent_tasks = 5
    } | ConvertTo-Json
    
    try {
        $response = Invoke-RestMethod -Uri "http://$MasterHost`:$MasterPort/api/workers/register" -Method POST -Body $workerData -ContentType "application/json"
        Write-Host "‚úÖ $workerId registrado: $($response.message)" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Error registrando $workerId`: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# 4. Verificar estado del sistema
Write-Host ""
Write-Host "üìä Verificando estado del sistema..." -ForegroundColor Yellow

try {
    $status = Invoke-RestMethod -Uri "http://$MasterHost`:$MasterPort/api/status" -Method GET
    Write-Host "‚úÖ Estado del sistema:" -ForegroundColor Green
    Write-Host "   Master: $($status.master_status)" -ForegroundColor Gray
    Write-Host "   Workers activos: $($status.active_workers)" -ForegroundColor Gray
    Write-Host "   Workers totales: $($status.total_workers)" -ForegroundColor Gray
    Write-Host "   Trabajos activos: $($status.active_jobs)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Error obteniendo estado del sistema: $($_.Exception.Message)" -ForegroundColor Red
}

# 5. Ejecutar pruebas si est√°n habilitadas
if (-not $SkipTests) {
    Write-Host ""
    Write-Host "üß™ Ejecutando pruebas de comunicaci√≥n..." -ForegroundColor Yellow
    
    if (Test-Path "test_worker_communication.py") {
        try {
            python test_worker_communication.py
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Pruebas completadas exitosamente" -ForegroundColor Green
            } else {
                Write-Host "‚ö†Ô∏è  Algunas pruebas fallaron" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "‚ùå Error ejecutando pruebas: $($_.Exception.Message)" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ö†Ô∏è  Archivo de pruebas no encontrado: test_worker_communication.py" -ForegroundColor Yellow
    }
}

# 6. Mostrar informaci√≥n de uso
Write-Host ""
Write-Host "üéâ Sistema GridMR iniciado exitosamente!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Informaci√≥n de uso:" -ForegroundColor Yellow
Write-Host "   Master API: http://$MasterHost`:$MasterPort/api" -ForegroundColor Gray
Write-Host "   Health Check: http://$MasterHost`:$MasterPort/api/health" -ForegroundColor Gray
Write-Host "   Workers: http://$MasterHost`:$MasterPort/api/workers" -ForegroundColor Gray
Write-Host "   Jobs: http://$MasterHost`:$MasterPort/api/jobs" -ForegroundColor Gray
Write-Host ""
Write-Host "üîß Comandos √∫tiles:" -ForegroundColor Yellow
Write-Host "   Ver workers: Invoke-RestMethod -Uri 'http://$MasterHost`:$MasterPort/api/workers'" -ForegroundColor Gray
Write-Host "   Ver estado: Invoke-RestMethod -Uri 'http://$MasterHost`:$MasterPort/api/status'" -ForegroundColor Gray
Write-Host "   Enviar trabajo: python client/client.py --create-sample --job-type wordcount" -ForegroundColor Gray
Write-Host ""
Write-Host "‚èπÔ∏è  Para detener el sistema, presiona Ctrl+C" -ForegroundColor Yellow

# Mantener el script ejecut√°ndose
try {
    while ($true) {
        Start-Sleep -Seconds 10
        
        # Verificar que el master siga ejecut√°ndose
        if ($masterProcess.HasExited) {
            Write-Host "‚ùå El master se detuvo inesperadamente" -ForegroundColor Red
            break
        }
    }
} catch {
    Write-Host ""
    Write-Host "üõë Deteniendo sistema GridMR..." -ForegroundColor Yellow
    
    # Detener el master
    if ($masterProcess -and -not $masterProcess.HasExited) {
        Write-Host "‚èπÔ∏è  Deteniendo master (PID: $($masterProcess.Id))..." -ForegroundColor Yellow
        Stop-Process -Id $masterProcess.Id -Force -ErrorAction SilentlyContinue
    }
    
    Write-Host "‚úÖ Sistema GridMR detenido" -ForegroundColor Green
}
